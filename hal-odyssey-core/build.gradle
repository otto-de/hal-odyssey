buildscript {
	ext {
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
}

plugins {
	id 'java'
	id 'idea'
	id 'eclipse'
	id 'maven'
	id 'signing'
}

group = 'de.otto.edison'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

dependencies {
	compile("org.webjars:bootstrap:3.3.7")
	compile("de.otto.edison:edison-hal:2.0.2")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")

	compile("org.apache.httpcomponents:httpclient:4.5.3")

	runtime("org.springframework.boot:spring-boot-devtools:${springBootVersion}")

	compileOnly("org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}")

	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
}

compileJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:all,-serial"
}

compileTestJava {
	options.encoding = 'UTF-8'
	options.compilerArgs << "-Xlint:all,-serial"
}

test {
	println()
	afterSuite { desc, result ->
		if (!desc.parent) { // will match the outermost suite
			println "Test Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
		}
	}
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

signing {
	sign configurations.archives
}

task askForVersionNumber {
	doLast {
		def console = System.console()
		def enteredVersion
		if (console) {
			version = trimSnapshot(version)
			enteredVersion = console.readLine('\n\u001B[92m\u001B[1mWhich version do you want to release?\u001B[0m \u001B[2m[' + version + ']\u001B[0m ')
			if (!enteredVersion.isEmpty()) {
				version = enteredVersion
			}
			bumpVersionInGradleFile(version)
		} else {
			logger.error "Cannot get console."
		}
	}
}

def bumpVersionInGradleFile(String theVersion) {
	def myFile = new File('build.gradle')
	def output = ""
	myFile.eachLine { line ->
		output += line.replaceAll('^version\\s*=\\s*.*$', "version='" + theVersion + "'")
		output += "\n"
	}
	def outFile = new File("build.gradle")
	outFile.write(output)
}

def incrementVersion(String theVersion) {
	def versionArray = theVersion.split("\\.")
	def major = versionArray[0].toInteger()
	def minor = versionArray[1].toInteger() + 1
	def patch = 0

	return major + "." + minor + "." + patch;
}

def trimSnapshot(String theVersion) {
	if (theVersion.endsWith("-SNAPSHOT")) {
		return theVersion.substring(0, theVersion.length()-9)
	} else {
		return theVersion;
	}
}


task commitNewVersion {
	doLast {
		println(["git", "add", "build.gradle"].execute().text.trim())
		println(["git", "commit", "-m", "bump version to " + version].execute().text.trim())
		bumpVersionInGradleFile(incrementVersion(version) + "-SNAPSHOT")
		println(["git", "add", "build.gradle"].execute().text.trim())
		println(["git", "commit", "-m", "bump version to next snapshot"].execute().text.trim())
	}
}

task doRelease {
	dependsOn askForVersionNumber, uploadArchives, commitNewVersion
}

doRelease {
	doLast {
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.project {
				name 'hal-odyssey-core'
				packaging 'jar'
				description 'A library used to embed a HAL+JSON UI into Spring Boot applications.'
				url 'https://github.com/otto-de/hal-odyssey'

				scm {
					url 'scm:git@github.com:otto-de/hal-odyssey.git'
					connection 'scm:git@github.com:otto-de/hal-odyssey.git'
					developerConnection 'scm:git@github.com:otto-de/hal-odyssey.git'
				}

				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'gsteinacker'
						name 'Guido Steinacker'
					}
				}
			}
		}
	}
}

commitNewVersion.shouldRunAfter uploadArchives
